// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kind

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type Kind struct {
	pulumi.CustomResourceState

	Name pulumi.StringOutput `pulumi:"name"`
}

// NewKind registers a new resource with the given unique name, arguments, and options.
func NewKind(ctx *pulumi.Context,
	name string, args *KindArgs, opts ...pulumi.ResourceOption) (*Kind, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Kind
	err := ctx.RegisterResource("kind:index:Kind", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKind gets an existing Kind resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKind(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KindState, opts ...pulumi.ResourceOption) (*Kind, error) {
	var resource Kind
	err := ctx.ReadResource("kind:index:Kind", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kind resources.
type kindState struct {
}

type KindState struct {
}

func (KindState) ElementType() reflect.Type {
	return reflect.TypeOf((*kindState)(nil)).Elem()
}

type kindArgs struct {
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a Kind resource.
type KindArgs struct {
	Name pulumi.StringInput
}

func (KindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kindArgs)(nil)).Elem()
}

type KindInput interface {
	pulumi.Input

	ToKindOutput() KindOutput
	ToKindOutputWithContext(ctx context.Context) KindOutput
}

func (*Kind) ElementType() reflect.Type {
	return reflect.TypeOf((**Kind)(nil)).Elem()
}

func (i *Kind) ToKindOutput() KindOutput {
	return i.ToKindOutputWithContext(context.Background())
}

func (i *Kind) ToKindOutputWithContext(ctx context.Context) KindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KindOutput)
}

func (i *Kind) ToOutput(ctx context.Context) pulumix.Output[*Kind] {
	return pulumix.Output[*Kind]{
		OutputState: i.ToKindOutputWithContext(ctx).OutputState,
	}
}

type KindOutput struct{ *pulumi.OutputState }

func (KindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kind)(nil)).Elem()
}

func (o KindOutput) ToKindOutput() KindOutput {
	return o
}

func (o KindOutput) ToKindOutputWithContext(ctx context.Context) KindOutput {
	return o
}

func (o KindOutput) ToOutput(ctx context.Context) pulumix.Output[*Kind] {
	return pulumix.Output[*Kind]{
		OutputState: o.OutputState,
	}
}

func (o KindOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Kind) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KindInput)(nil)).Elem(), &Kind{})
	pulumi.RegisterOutputType(KindOutput{})
}
